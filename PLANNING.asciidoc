= Notetaking application planning
Luke San Antonio <lukesanantonio@gmail.com>
v0.0, 2015-10-18

== Introduction
* At first looks similar to a word processor, or maybe a featured text editor.
** The idea here is not to have a bunch of different options but to stay in the
spirit of simple markup languages like latex and asciidoc - keep to content and
worry about aesthetic style later.

== User interface / Input
.Modes:
. Touchscreen mode
  * Accept input from the entire screen.
. Mouse mode
  * Pressing a key combination or pressing a button will create a large canvas
  for the user to draw in a character or diagram.
  ** Probably some things will keep the canvas showing allowing the user to
  continue drawing.

For both modes, clicking (or pressing) and moving an object should (by default)
have text wrap around it.

It would be great to have a mechanism to separate blocks of notes so this same
movement could be applied to the notes. This would mean more options for the
user to customize the look, feel, and flow of their notes.

== Internal Representation (File format)
Every document or note sheet has a text section that includes all the notes but
no visual elements (graphs, vector diagrams, etc.)

.Modes:
. Reference mode
  * The location in the text where the graph was created (or where the user
  later specified just includes a link to the object that is located at the end
  of the text. Possibly as subscript denoting the figure number it is.
. Inline mode
  * The graphs are inserted at or alongside the text where it was created or
  placed afterward.

== Implementation notes:
Each time the pen lifts up an ANN will check the segmentation of characters and
try to figure out if the drawing is complete or not. If it is done a result
will be obtained. This result could possibly be shown to the user for possible
correction, after a certain amount of time the chosen character will be
inserted into the document.

****
Would this neural network be separate from the network detecting characters and
diagrams? If not, it seems like we would need to train this one what a complete
character is and what is not by also teaching it every possible drawing /
character / diagram type.
****

It should be possible to insert and clean up unknown shapes

****
Is it possible to pick up on these patterns by the user and automate them?
****

== Presentation
After the user is done entering notes, all the data could be exported to a
standard "intermediate representation" of sorts. The style / aesthetics /
format of the resulting document could be determined by any number of programs
consuming this data.

== Current Architecture

The entire system:
[graphviz, system-diagram, svg]
....
digraph system_diagram {
  rankdir="LR"

  edit [ label = "Editor" ];
  int_form [ label = "Intermediate Representation" ];

  edit -> int_form -> "HTML Backend"
  int_form -> "PDF Backend"
  int_form -> "ODT Backend"

  "Alternative Editors" -> int_form
}
....

The editor
[graphviz, editor-diagram, svg]
....
graph editor_diagram {
}
....
